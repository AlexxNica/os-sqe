input {
#    stdin {}
  beats {
    port => 5044
  }
}

filter {
    grok {
        match => {"message" => ".*?req-%{UUID:mreq_id}.*?Request body: \{u'network': \{u'name': u'(?<network_name>.*?)'"}
        add_tag => ["network-create"]
        tag_on_failure => []
    }
    grok {
        match => {"message" => ".*?req-%{UUID:mreq_id}.*?\"POST.*?/v2.0/networks.json HTTP/1.1\" 201"}
        add_tag => ["network-create-response"]
        tag_on_failure => []
    }
    grok {
        match => {"message" => ".*?req-%{UUID:mreq_id}.*?Request body: \{u'subnet': \{u'network_id': u'%{UUID:network_id}'"}
        add_tag => ["subnet-create"]
        tag_on_failure => []
    }
    grok {
        match => {"message" => ".*?req-%{UUID:mreq_id}.*?\"POST.*?/v2.0/subnets.json HTTP/1.1\" 201"}
        add_tag => ["subnet-create-response"]
        tag_on_failure => []
    }
    grok {
        match => {"message" => ".*?req-%{UUID:mreq_id}.*?Network %{UUID:network_id} is scheduled to be hosted by DHCP agent (?<dhcp_agent_id>.*?)"}
        add_tag => ["dhcp-scheduled"]
        tag_on_failure => []
    }
    grok {
        match => {"message" => ".*?req-%{UUID:mreq_id}.*?Create dhcp port \{u'port': \{u'name': u'', u'admin_state_up': True, u'network_id': u'%{UUID:network_id}', u'tenant_id': u'(?<tenant_id>.*?)', u'fixed_ips': \[\{u'subnet_id': u'(?<subnet_id>.*?)'\}\]"}
        add_tag => ["port-dhcp-create"]
        tag_on_failure => []
    }
    grok {
        match => {"message" => ".*?req-%{UUID:mreq_id}.*?Allocated IP (?<ip>\d+\.\d+\.\d+\.\d+) "}
        add_tag => ["ip-allocate"]
        tag_on_failure => []
    }
    grok {
        match => {"message" => ".*?req-%{UUID:mreq_id}.*?Attempting to bind port %{UUID:port_id} on network %{UUID:network_id} "}
        add_tag => ["port-bind"]
        tag_on_failure => []
    }
    grok {
        match => {"message" => ".*?req-%{UUID:mreq_id}.*?Bound port: %{UUID:port_id}"}
        add_tag => ["port-bound"]
        tag_on_failure => []
    }
    grok {
        match => {"message" => ".*?req-%{UUID:mreq_id}.*?Deleting network %{UUID:network_id}"}
        add_tag => ["network-delete"]
        tag_on_failure => []
    }
    grok {
        match => {"message" => ".*?req-%{UUID:mreq_id}.*?Deleting port %{UUID:port_id}"}
        add_tag => ["port-delete"]
        tag_on_failure => []
    }
    grok {
        match => {"message" => ".*?req-%{UUID:mreq_id}.*?Calling delete_port for %{UUID:port_id} owned by network:dhcp"}
        add_tag => ["dhcpport-delete"]
        tag_on_failure => []
    }
    grok {
        match => {"message" => ".*?req-%{UUID:mreq_id}.*?Deleting subnet %{UUID:subnet_id}"}
        add_tag => ["subnet-delete"]
        tag_on_failure => []
    }
    grok {
        match => {"message" => ".*?req-%{UUID:mreq_id}.*?Deleting subnet record"}
        add_tag => ["subnet-record-delete"]
        tag_on_failure => []
    }
    grok {
        match => {"message" => ".*?req-%{UUID:mreq_id}.*?Deleting network record.*?tenant_id=u'(?<tenant_id>.*?)', id=u'%{UUID:network_id}'"}
        add_tag => ["network-record-delete"]
        tag_on_failure => []
    }
    grok {
        match => {"message" => ".*?req-%{UUID:mreq_id}.*?DELETE \/v2.0\/networks\/%{UUID:network_id}\.json"}
        add_tag => ["network-delete-response"]
        tag_on_failure => []
    }

    # Datetime
    grok {
        match => {"message" => "(?<datetime>\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\.\d{3})"}
        tag_on_failure => []
    }

    date {
        match => [ "datetime", "YYYY-MM-dd HH:mm:ss.SSS" ]
    }

    elapsed {
        start_tag => "network-create"
        end_tag => "network-create-response"
        unique_id_field => "mreq_id"
        new_event_on_match => true
        add_field => {"event" => "Create network"}
    }
    elapsed {
        start_tag => "subnet-create"
        end_tag => "subnet-create-response"
        unique_id_field => "mreq_id"
        new_event_on_match => true
        add_field => {"event" => "Create subnet"}
    }
    elapsed {
        start_tag => "port-dhcp-create"
        end_tag => "port-bound"
        unique_id_field => "mreq_id"
        new_event_on_match => true
        add_field => {"event" => "Create dhcp port"}
    }
    elapsed {
        start_tag => "network-delete"
        end_tag => "network-delete-response"
        unique_id_field => "mreq_id"
        new_event_on_match => true
        add_field => {"event" => "Delete network"}
    }
}

output {
#   stdout { codec => rubydebug }
    elasticsearch {
        hosts => "localhost:9200"
        manage_template => false
        index => "g10-filebeat"
        document_type => "%{[@metadata][type]}"
    }
}
