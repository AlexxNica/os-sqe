__author__ = 'ebagdasa'

# Please set following variables
# TESTLINK_API_PYTHON_SERVER_URL=http://[YOURSERVER]/testlink/lib/api/xmlrpc/v1/xmlrpc.php
# TESTLINK_API_PYTHON_DEVKEY=[Users devKey generated by TestLink]
import testlink
import json
import os
import xml.etree.ElementTree as ET
from fabric.api import task, put, get, settings, env
from common import timed
import re
import datetime
from fabs import DEFAULT_SETTINGS

__all__ = ['upload_results', 'create_test_cases']
env.update(DEFAULT_SETTINGS)

URL_LOCATION = "172.29.173.233"
fab_settings = {"host_string": URL_LOCATION, "user": "localadmin", "password": "ubuntu", "abort_on_prompts": True}
FOLDER_LOCATION = "/var/www/nightly"
CURRENT_NAME_ID = "test_id_new.txt"
NAME_ID_FILE_LOCATION = FOLDER_LOCATION + "/" + CURRENT_NAME_ID
TEST_SUITE_ID = '4252'
TEST_PROJECT_ID = "13"
TEST_PLAN_ID = '4253'
MY_DEV_KEY = '90a2d3f72716160b24b85499446695b5'
CLASS_REGEX = re.compile(r'setUpClass \((.*)\)')


def update_name_id_arr():
    with settings(**fab_settings):
        get(NAME_ID_FILE_LOCATION, CURRENT_NAME_ID)
    with open(CURRENT_NAME_ID) as f:
        name_id_arr = json.load(f) if f else {}
    if not (os.environ.get("TESTLINK_API_PYTHON_SERVER_URL", "") and
            os.environ.get("TESTLINK_API_PYTHON_DEVKEY", "")):
        raise Exception("Please set the environment variable")
    tls = testlink.TestLinkHelper().connect(testlink.TestlinkAPIClient)
    return name_id_arr, tls


@task
@timed
def upload_results(test_results_xml='tempest_results.xml'):
    """ Upload test results """
    print "Uploading results"
    name_id_arr, tls = update_name_id_arr()
    with open(test_results_xml) as f:
        test_results = ET.parse(test_results_xml).getroot()
    build_name = 'MyBUILD_' + datetime.datetime.now().strftime(
        "%Y_%m_%d_%H_%M_%S")
    print build_name
    tls.createBuild(TEST_PLAN_ID, build_name, 'my build notes')
    for test_case in test_results:
        tc_name = test_case.attrib["name"]
        tc_class = test_case.attrib["classname"]
        status = "passed" if not len(test_case) else test_case[0].tag
        if status == "skipped":
            status = "blocked"
        notes = 'Test Passed' if not len(test_case) else test_case[0].text[-500:]
        if not tc_class:
            tc_class = re.match(CLASS_REGEX, tc_name).group(1)
            for tests in name_id_arr.get(tc_class, {}).itervalues():
                result = tls.reportTCResult(testcaseid=tests["id"],
                                            testplanid=TEST_PLAN_ID,
                                            buildname=build_name,
                                            status=status[0], notes=notes)
            continue
        tc_struct = name_id_arr.get(tc_class, {}).get(tc_name, "")
        if not tc_struct:
            create_test_cases(tls, [tc_class + "." + tc_name])
            tc_struct = name_id_arr.get(tc_class, {}).get(tc_name, "")
        test_case_id = tc_struct["id"]
        print tc_name + '   ' + test_case_id
        try:
            result = tls.reportTCResult(testcaseid=test_case_id,
                                        testplanid=TEST_PLAN_ID,
                                        buildname=build_name, status=status[0],
                                        notes=notes)
        except Exception as exc:
            print exc
    print 'success'


@task
@timed
def create_test_cases(test_list_file):
    """ Create test cases """
    with open(test_list_file) as f:
        test_list = f.readlines()
    name_id_arr, tls = update_name_id_arr()
    print "Creating test cases"
    for test_name in test_list:
        full_tc_name = test_name.rstrip()
        tc_name = full_tc_name.split('.')[-1]
        tc_class = '.'.join(full_tc_name.split('.')[:-1])
        if name_id_arr.get(tc_class, {}).get(tc_name, ""):
            continue
        print tc_class
        try:
            new_tc = tls.createTestCase(testcasename=tc_name.split('[')[0],
                                        testsuiteid=TEST_SUITE_ID,
                                        testprojectid=TEST_PROJECT_ID,
                                        authorlogin='admin',
                                        summary=full_tc_name, steps='',
                                        executiontype=2)
            response = tls.addTestCaseToTestPlan(TEST_PROJECT_ID,
                                                 TEST_PLAN_ID, 'et-' +
                                                 new_tc[0]["additionalInfo"][
                                                     "external_id"], 1)
        except Exception as exc:
            print exc
        print new_tc[0]["id"]
        name_id_arr.setdefault(tc_class, {})
        name_id_arr[tc_class][tc_name] = {
        "external_id": new_tc[0]["additionalInfo"]["external_id"],
        "id": new_tc[0]["id"]}
    with open(CURRENT_NAME_ID, 'w') as f:
        f.write(json.dumps(name_id_arr, sort_keys=True,
                           indent=4, separators=(',', ': ')))
    with settings(**fab_settings):
        put(CURRENT_NAME_ID, '/var/www/' + FOLDER_LOCATION + "/" + CURRENT_NAME_ID)
