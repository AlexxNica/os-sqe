from lab.base_lab import LabWorker


class RunnerKloudBuster(LabWorker):

    def sample_config(self):
        return {'cloud': 'cloud name'}

    def __init__(self, config):
        super(RunnerKloudBuster, self).__init__(config=config)
        self.cloud_name = config['cloud']

    def execute(self, clouds_and_servers):
        cloud = clouds_and_servers['clouds'][0]
        server = clouds_and_servers['servers'][0]
        open_rc_body = cloud.create_open_rc()
        open_rc_path = '{0}.openrc'.format(self.cloud_name)
        results_path = 'kloudbuster-results.json'
        venv_path = '~/venv_kloudbuster'

        server.r_create_user(new_username='kloudbuster')
        server.r_put_string_as_file_in_dir(string_to_put=open_rc_body, file_name=open_rc_path)
        repo_dir = server.clone_repo(repo_url='https://github.com/openstack/kloudbuster.git')
        server.exe(command='virtualenv {0}'.format(venv_path))
        server.exe(command='{0}/bin/pip install -r requirements.txt'.format(venv_path), in_directory=repo_dir)
        server.exe(command='{0}/bin/python setup.py install'.format(venv_path), in_directory=repo_dir)
        status = server.exe(command='{0}/bin/kloudbuster --tested-rc {1} --tested-passwd {2} --json {3}'.format(venv_path, open_rc_path, cloud.password, results_path))

        results = server.get(remote_path=results_path)

        with open(results_path, 'w') as f:
            f.write(status)
            f.write('\nJSON generated by kloudbuster:\n')
            f.write(results)
        return True
